{"pages":[{"text":"Python is doing very well in the world of programming languages. The popularity of Python has been growing steadily over the past decades as shown by the TIOBE and PYPL indexes. This doesn't have to be surprising, since Python has a lot going for it: it's easy to learn, it has a beautiful syntax, an excellent standard library, a great package ecosystem covering many domains and a friendly community. However, one thing that Python is not, is fast. Python is Not Fast Enough While it is true that many applications can benefit from NumPy , Numba and Cython to speed them up massively, there is a class of applications that cannot take this route. One example is my own project, rinohtype. There is no single, obvious bottleneck such as a tight number-crunching loop that can be sped up using these tools. But haven't you heard about PyPy? , you say. I have, and alas, it runs rinohtype slower than CPython! PyPy neither is able to speed up all classes of applications. And especially for batch-type applications such as rinohtype, the significant JIT warmup time might even negate any speedups. I am not alone to believe that Python's speed is an issue. Countless efforts have been made at running Python applications at a faster pace: PyPy , Pyston , Pyjion , Nuitka , Pythran , FAT Python, RegisterVM , wpython, HotPy , unladen-swallow , Psyco, Shed Skin , and more . Pyston is a JIT -based Python implementation originally supported by DropBox. Unfortunately, DropBox have stopped sponsoring its development and has been moving its performance-critical code over to Go. Google similarly seems to be moving away from Python . These are clear indications that Python is losing ground to new programming languages that offer a similar features to Python but better performance in addition. There's no more denying that Python isn't fast enough. A Different Approach We should face the facts and admit we are fighting a losing battle. Yet another Python compiler or JIT engine will not bring the hoped-for performance boost. As demonstrated by the many failed attempts, speedy execution of (all) Python code is a near-impossible challenge. It's time to look at more drastic, but technically much simpler ways to solve Python's performance problem. JavaScript ( V8 , SpiderMonkey ) and Lua ( LuaJIT ) are often cited as examples of dynamic languages with very fast JIT implementations. These languages are arguably much simpler than Python, which undoubtedly influences the complexity and performance of a JIT compiler. Therefore, the reason for Python's limited performance perhaps lies in the nature of the language itself; some of its features simply make it ill-suited for fast execution using a JIT . One example of such a feature is the fact that everything in Python is mutable, killing many opportunities for optimization. It should be possible to define a subset of the Python language, uninspiredly dubbed \"TurboPython\", that excludes those features that stand in the way of high-performance JIT execution (or compilation). Not using some of these features coincides with good design practices, so it doesn't necessarily have to be all bad. While the fact that everything is mutable in Python is useful for mocking purposes during testing, it is generally considered extremely bad style to override builtin functions, constants or class methods in production code. Other candidates for banishment from TurboPython include eval and exec . Since type annotations are now an official Python feature, I would go far as to say that these should be required in TurboPython code, since the presence of type information allows for the JIT compiler to be much simpler and more performant (and reduces warmup time as well). In fact, even without a JIT , a simple TurboPython interpreter might even be many times faster than CPython. TurboPython should of course not replace Python as we know it. It needs to exist alongside Python, to be used when the extra performance is required. Since TurboPython is a subset of Python, it will also run on Python interpreters, albeit slower. Ideally, a single class, module or package used could be written in TurboPython and benefit from the extra speed while the rest of the application runs at its usual pace. Python 3.6 introduced an API that allows plugging a JIT into CPython, which might be used to implement something like this. I lack the experience with interpreter/ JIT /compiler design to assess whether the suggestions made above are in fact feasible and capable of resulting in a significant speed boost. I'll leave that to others. I do however know that the current approaches are not cutting it and alternatives need to be explored.","tags":"rinohtype","loc":"http://www.mos6581.org/python_need_for_speed","title":"Python and the need for speed"},{"text":"I was very happy to give a talk on rinohtype at FOSDEM 2017 last weekend. A video recording of the 30-minute presentation is now available: MPEG4 ( 155MB ) or WebM/ VP8 ( 67MB ). While I appear to be invisible in the video, the slides and audio are clear. The slide deck is also available for download. The talk starts with a gentle introduction to rinohtype and continues to illustrate how documents can be styled using style sheets and document templates, which provides a nice introduction to these features. For more details about them, please head over to the manual . There was some time left for questions from the audience. Unfortunately some of the questions are inaudible, so I have paraphrased them here: Can rinohtype output different versions of PDF , such as PDF /A? Is there a rinohtype frontend that allows parsing and rendering (La)TeX documents? Can you set the alignment of images in the style sheet or template? Does rinohtype handle Unicode? Does rinohtype handle custom reStructuredText directives? How difficult is it to implement another frontend, for Textile for example? Can rinohtype handle multiple input files and concatenate them in the output?","tags":"rinohtype","loc":"http://www.mos6581.org/fosdem2017","title":"rinohtype at FOSDEM 2017"},{"text":"I am pleased to announce the release of rinohtype 0.3.0. It brings many new features and bugfixes since 0.2.1. Below, you'll find an overview of the highlights of this release. For a full list of changes, see the change log . You can install rinohtype using pip . There's also a stand-alone version of the command line rendering tool rinoh for Windows that includes Python. Highlights The major new feature in 0.3.0 is the ability to configure a document template using an INI file. Along with style sheet files (also in INI format), this makes it very easy to style your document. Read more about it in the Quickstart guide. Other highlights of the 0.3.0 release are: a more mature Sphinx builder ; no more need for a bulky LaTeX installation to produce PDFs a CommonMark frontend based on recommonmark the command line rendering tool rinoh now also renders CommonMark files and takes additional options the documentation now includes a list of supported attributes for each element style to be used as a reference when editing style sheets basic support for localization of section titles and other strings make use of a fallback typeface when a glyph is not present in a font Feedback For general discussions on rinohtype, you are welcome to join the mailing list ( GMANE archive ). We also have a Gitter chat room . Please report bugs using the GitHub issue tracker . Comments on Reddit .","tags":"rinohtype","loc":"http://www.mos6581.org/rinohtype_0.3.0","title":"rinohtype 0.3.0 released"},{"text":"Almost 18 months have passed since I announced RinohType , so it's about time for a little status update. Inspired by some of the comments on the last blog article, I decided to focus on reStructuredText support, as this would make RinohType much more useful to many people. The changes required to fully support reStructuredText also led to may other improvements in RinohType. Additionally, the style sheet system has received some important updates. The changes are summarized below. Last year, I submitted a talk proposal to EuroPython which was unfortunately rejected. From the reviewers' comments I understood that the proposal could not be accepted without the availability of a RinohType release. For EuroPython 2015, I submitted a new proposal, now accompanied with a first RinohType release . This release includes a command-line to tool to render reStructuredText files and a Sphinx builder. You are welcome to give it a spin and send me feedback. Expect to encounter many bugs, however. Please find more details in the description on PyPI. reStructuredText and Sphinx RinohType now has fairly complete support for reStructuredText . Armed with demo.txt , I set out to interpret and render all remaining reStructuredText doctree elements: field/option lists, hyperlinks, problematic nodes (text color), compound paragraphs, sidebar, inline images, figures, citations and tables. While all reStructured directives should now be supported, the various options that can be passed to the them might be not be. reStructuredText's ability to nest document elements uncovered the fact that many of my document building blocks were built under much simpler assumptions. For example, a table cell can now contain any other element such as a list or even another table, where before it could only contain text. The document building blocks in general are now much more capable and should be able to handle whatever reStructuredText supports at the least. The RinohType building blocks (so-called flowables ) now also form a proper nested document tree, which is very useful when styling the document. Table rendering code was rewritten completely to: accept any flowable as cell content instead of only text, better fit the styling mechanism, and be able to automatically size columns based on their content. A wonderful corollary of reStructuredText support is that it was fairly easy to create a Sphinx builder. I have already used it to render a small technical report for my freelance work. It does not yet support all custom reStructuredText directives added by Sphinx however, so it cannot yet render Sphinx's documentation. Locally, I have it parsing the complete document tree, but it still fails rendering at some point, so you can expect this to work very soon. The builder is included in the release mentioned above. Instructions on how to use it can be found in the release's package description on PyPI. PDF Backend The PDF backend was extended to support some of the reStructuredText features; it can now output colored text and display interactive hyperlinks (but for some reason, they don't all work in Apple Preview). Next to PDF images, bitmap images are now also supported when Pillow is installed. It is now also possible to copy selected text from the resulting PDF and not end up with gibberish when pasting. The problem with certain PDF readers (Firefox's pdf.js and Evince) has not yet been resolved, however. I am fairly certain this is due a bug in the readers, but I might try to work around it. Style System I also took some time to make fundamental improvements to the styling system. The new system is heavily inspired by CSS , but adds some extra functionality that CSS lacks. The style sheets are currently specified in Python code (see examples below). I might provide a plain text alternative ( YAML , INI or perhaps even CSS ) in the future. The following illustrates the most important features of the style system without going into details. Selectors Very similar to CSS selectors , elements can be matched based on their context. For example, the following matches any paragraph that is a child of a list item. ListItem / Paragraph ListItem and Paragraph are both RinohType classes ( Flowable subclasses) that make up the document tree. Similar to HTML / CSS 's ‘class' attribute, a flowable can have a ‘style' attribute which can be checked when constructing a selector. This selects all paragraphs of style ‘title': Paragraph . like ( 'title' ) The like method can also match arbitrary attributes of elements. This can be used to do more advanced things such as selecting the background objects on all odd rows of a table, limited to the cells not spanning multiple rows: TableCell . like ( row_index = slice ( 0 , None , 2 ), rowspan = 1 ) / TableCellBackground Python's ellipsis can be used to match any number of levels in the document tree. For example, the following matches any paragraph element at any level inside a table cell. TableCell / ... / Paragraph RinohType borrows CSS 's concept of specificity to determine the \"winning\" selector when multiple selectors match a given document element. Matchers and Style Sheets In contrast to CSS , RinohType's style system has an extra layer of indirection so that the user does not have to redefine the selectors in each style sheet. A StyledMatcher is basically a dictionary that maps descriptions to selectors. matcher = StyledMatcher () ... matcher ( 'emphasis' , StyledText . like ( 'emphasis' )) matcher ( 'nested line block' , GroupedFlowables . like ( 'line block' ) / GroupedFlowables . like ( 'line block' )) ... A single StyledMatcher can serve multiple StyleSheet s: styles = StyleSheet ( 'IEEE' , matcher = matcher ) ... styles ( 'emphasis' , font_slant = ITALIC ) styles ( 'nested line block' , margin_left = 0.5 * CM ) ... One feature sorely missing from CSS is variables. Here's an example of how variables can be specified and used in RinohType style sheets: styles . variables [ 'ieee_family' ] = TypeFamily ( serif = times , sans = helvetica , mono = courier ) ... styles ( 'monospaced' , typeface = Var ( 'ieee_family' ) . mono , font_size = 9 * PT , hyphenate = False , ligatures = False ) ... Another stylesheet can inherit from this one and easily replace all fonts in the document by overriding the ieee_family variable. I doubt there will be a need to have many different matchers. The end user will likely never have to deal with them as most documents can use the default matcher. When custom flowables are used in a document, the default base matcher can be easily extended to style these. Inheritance Similar to CSS 's inheritance , text elements inherit properties from their parent. So for the example style sheet above, text with style emphasis inherits the properties (such as typeface , font_weight and font_size ) from the paragraph it is a child of, but overrides the font_slant property. In addition, RinohType allows specifying a base style for each style. This avoids duplication of style information and the maintenance difficulties resulting from it. styles ( 'heading level 1' , typeface = Var ( 'ieee_family' ) . serif , font_weight = REGULAR , font_size = 10 * PT , small_caps = True , justify = CENTER , line_spacing = FixedSpacing ( 12 * PT ), space_above = 18 * PT , space_below = 6 * PT , number_format = ROMAN_UC , label_suffix = '.' + FixedWidthSpace ()) styles ( 'unnumbered heading level 1' , base = 'heading level 1' , number_format = None ) Performance Shortly after posting the first blog article on RinohType, I've focused on speeding up document processing. Appareantly I managed to almost halve rendering time by refactoring the code and adding more memoization. The next step was to speed up the slowest code by compiling to a fast C module using Cython and static type declarations. Unfortunately, there was no single part of the code where most of the time was spent, as these were repeatedly removed during refactoring for speed earlier. And even when cythonizing some parts, they didn't result in a significant performance boost. I believe this is due to the fact that there's not much number crunching going on as in the typical applications benefitting from Cython. In RinohType, I suspect container (dict, list) access operations to be the most common. Next stop: PyPy . Hoping for a no-effort instant speedup, instead both PyPy3 and PyPy2 were much slower than CPython! As for Cython, I suppose this could be attributed to the fact that RinohType is not the typical use case for PyPy. But the situation isn't dramatic. RinohType is plenty fast on modern systems. The rendering time shouldn't be a problem unless you're rendering hundreds of pages. Once RinohType is more feature-complete and less buggy, I might revisit performance tuning. Feedback For general discussions on RinohType, you are welcome to join the mailing list ( GMANE archive ). Please report bugs using the GitHub issue tracker . Comments on Hacker News and Reddit","tags":"rinohtype","loc":"http://www.mos6581.org/rinohtype_status_update_1","title":"RinohType update: reStructuredText and style sheets"},{"text":"When you want to include external code in your git repository, for example a third-party library or code shared with another team, there are two popular options: git-submodule and git-subtree. Unfortunately both suffer from some problems and this led me to start thinking about an alternative way to handle external repositories. I will first summarize how git-submodule and git-subtree work and discuss their drawbacks. I will then introduce an alternative to these, \"git-subrepo\" and present a (partial) proof-of-concept implementation. In the following, we assume a single submodule/subtree/subrepo. git-submodule Submodules are the officially supported way of including external repositories; git-submodule is included with every git installation. A submodule is basically a pointer to a commit of an external git repository. This model works well when you want to include a third-party library in your project that only occasionally needs to be updated . On the other hand, if you use a submodule for a tightly-coupled library to which you will often be making changes, you will find that submodules are not the answer. In this use case, you will simultaneously be making changes to your top-level project and the library. When the time has come to commit these changes, you first need to commit your changes in the submodule, then do the same in your top-level project. Oh, and make sure you push the changes to the submodule before committing and pushing the top-level changes or other people will run into trouble when pulling in your top-level commit. Things get even more exciting when you want to push that submodule commit afterwards to fix things, only to find out that someone sneaked in a commit in the meantime! Now you'll have to create a new commit on the top-level project to point it to your rebased commit, hah! In short: too much of a hassle and far too easy to make a mess. If that's not enough to convince you, you should try branching with this setup. You'll have to manually branch (and later merge) each of your submodules when you create a new branch. In the past, I have worked with a git repository containing a dozen tightly-coupled submodules for code-sharing with other teams. Needless to say, it didn't take very long to realize that submodules are not suited for that use case. git-subtree git-subtree avoids most of the problems submodules suffer from. During everyday work, you won't have to worry about a thing, as git-subtree is only needed when interfacing with external repositories. So, most of the time you are working with a single repository; the library is simply included in your repository as a subdirectory. That means that branching is also transparent. This is infinitely more comfortable than mucking about with submodules. At some point you can choose to have git-subtree extract the changes to your library from the commit history. This will create a new branch with a commit for each commit of the top-level project that includes changes to the library. The root directory of this new branch is equal to the subdirectory where the library resides. The new branch can then be pushed to the library's remote, where it can be merged with other branches. After all, that's the point of having a submodule or a subtree. Unfortunately, splitting out these subtree changes can take a long time . And unless you use the --rejoin option, git-subtree needs to perform this splitting over and over for all commits in your history on each split. The --rejoin option merges the new subtree branch back into the main project's branch, duplicating the existing commits. While this raises no technical worries, your history will be complicated unnecessarily. The alternative, git-subrepo It would be better if changes were split between the main project and the library at commit time, basically yielding two actual commits. The main project commit would then simply (subtree-)merge in the library's commit. This way the library's commit can be used as-is for pushing to the library remote. Let's illustrate this with a figure. Subrepo commit The master branch (left) holds the commits of the main project and the library branch (right) holds the commits of the library (shown in red). Let's refer to the latter as the subrepo branch and subrepo commits for lack of better terms. The \"logical commits\" C and E contain no changes to the library; only a single commit is created. Commits A, B and D do make changes to the library, so two actual commits are created for each logical commit. Commit A is the commit that introduces the subdirectory where the library resides, so this yields the first commit of the library branch. As with git-subtree, an existing library branch could be subtree-merged into the master branch first, in which case we would build on that history. Note that the library branch is completely independent of the master branch, so it can be pushed to the library's remote at any point in time. There is no need for splitting or rejoining as is the case with git-subtree. Aside from splitting up commits, we also need to take special care when merging and rebasing. The figure below illustrates how merges should be handled. The branched-off subrepo commits first need to be merged into the library branch. As with the commit-splitting above, the resulting subrepo merge-commit is referenced as a parent of the merge-commit on the main master branch. Subrepo merge Rebasing is fairly straight-forward. A subrepo commit is rebased onto the library subrepo branch. The corresponding main-line commit is rebased onto the master branch and references the rebased subrepo commit as a parent. Subrepo rebase Proof of concept I hacked together post-commit and post-merge hook scripts to implement some of the functionality discussed above. These hooks expect you specify the subrepo directories in a .gitsubrepos file in the root of your repository. Each subrepo directory should be specified on its own line. The post-commit hook should work fairly well. Since this is a post -commit script, you simply perform your commit as usual. The hook script will create the subrepo commits for each of the subrepos with changes, cloning the commit metadata (timestamp, author) from your commit. A new main-line commit will also be created that references the subrepo commit as a parent. After finishing, git will still report the SHA -1 of the original commit though, so don't let that fool you. Note that branching is handled transparently. The parent for the split-off subrepo commit is found by walking the history down to the last commit that merges in a subrepo commit. Branches have no influence on this. During merging, you handle conflicts as usual, after which the post-merge hook will try to create merge commits for each of the subrepos. In its current state, the hook will produce some unexpected results in some situations though. I have not yet attempted to write a hook to handle rebases and amend-commits. This will almost require a post-rewrite hook. Probl… err, challenges Assuming it is possible to write a post-rewrite script to handle rebasing and amend-commits, I believe subrepos could be a better alternative to git-subtree. Unfortunately, I also see some problems with this solution. First, I don't think hooks are the correct way to implement subrepos, but I have no idea how to go about it otherwise. I'm not aware of any other git features that allow plugging into the commit, merge and rebase processes. The alternative is to require the user to use different commands for performing these operations, which is something I want to avoid. Second, the way the history with subrepo commits is displayed in git-log and gitk (and other graphical git front-ends) leaves something to be desired. For instance, if you commit changes to N subrepos you will end up with N+1 commits, which clutters the commit history even for small N. Take a look at this sample repository . Also, each commit with subrepo changes will be displayed as a merge commit. Gitk does not show changes in the subrepo if this commit only merges in a single subrepo commit. When multiple subrepo commits are merged in, gitk does show the changes, but as a complicated N-way merge diff. Ideally, gitk should be made aware of subrepos; it should group all subrepo commits together with the main commit and display it as a single entry. I feel this is a fair price to pay for proper, first-class subrepositories support. Random Ideas For future reference, here are some ideas for git-subrepo. When a commit includes changes to one or more subrepos, the commit message template should include sections for each subrepo. This way the user can specify the commit message for each of the subrepo commits. This is much better than the current behaviour where the same commit message is used for the main commit and all subrepo commits. This will require a prepare-commit-msg hook. git-subrepo should create branches to track the subrepos. They could have the following format: subrepo/<subrepo name>/<HEAD branch name> This allows the user to easily inspect the history of subrepos separately. Comments on Hacker News and Reddit","tags":"misc","loc":"http://www.mos6581.org/git_subtree_alternative","title":"Exploring an alternative to git-subtree"},{"text":"I originally planned to release RinohType into wild only after I had finished a full review, refactoring and documenting of the code. I also wanted to write some API documentation and a small tutorial, all in the spirit of making a good first impression. Turns out all this takes a huge amount of time! So I've decided to dump the code in its current state onto GitHub, write a blog article about it and await some valuable feedback while I resume my refactoring and documenting chore. If you decide to play around with the code, please bear in mind that this is just a preview; your experience might not be as smooth as I intend it to be eventually. Motivation Somewhere back in 2009, I was using LaTeX to write a paper on some of my PhD research . I had used LaTeX before for a number of lab reports and two master's theses, so I was already experienced with it. While I find working with LaTeX is generally a smooth experience, I did encounter some annoyances over the years. The particular annoyance of the day was figure placement. Where LaTeX's automatic figure placement is pretty good in longer texts, I find it extremely frustrating when writing a short paper. For these papers, I basically want to place my figures manually, exactly where I want them (figure 2 goes in the top of the left column on page 2, for example). However, this doesn't seem to be an option with LaTeX, so I ended up moving my \\includegraphics directive around in the LaTeX source document in a trial-and-error fashion to have the figure eventually appear where I wanted it to be. Basically, this meant moving all my \\includegraphics directives to a location far from near the text where it would end up in the rendered document. After a good hour of messing around with this and exploring two alternatives to LaTeX ( Lout and ConTeXt ), I said to myself, Enough! I'm writing my own document processor! And so I set out to build the definitive replacement for LaTeX. It is worth pointing out the other gripes I have with (La)TeX at this point. I will probably regret this later (I have the impression TeXies can be quite fanatical), but here we go: TeX is not transparent. It is a huge, complex system. To make things worse, there are a number of different TeX distributions, each organizing things in a slightly different way. With hundreds of megabytes and seemingly millions of files for a typical TeX installation, I have no idea what is going on when TeX processes a document. kpathsea is a testament to a part of this complexity. The arcane TeX macro language is not accessible to a broad audience. I believe this is why most LaTeX-generated documents you come across have exactly the same (retro) look; very few people are capable of creating new document styles. TeX is not very modern. Yes, even today it still is a very impressive piece of software. However, next to being built upon some weird macro language of old, it predates a lot of modern technologies (Unicode, standard font file formats, Postscript and PDF ), so these things had to be hacked into it. While I understand you generally shouldn't rewrite software from scratch, maybe TeX should be one of the few exceptions to this rule? TeX's warnings/errors are often very cryptic. It can sometimes take a long time to figure out what's wrong. (La)TeX has an incredible amount of extension packages available. There's probably a package for pretty much anything you might ever need . But why do I even need to mess around with all these extension packages when all I'm doing is writing a simple article? Doesn't this mean that LaTeX should include at least some of the most commonly used packages by default? This might largely be a solved problem by now, but I remember often running into input and font encoding issues with LaTeX in the past. There is no strict separation of content and style. This is mostly an issue for publishers that want to ensure a consistent style across articles in a journal. With LaTeX, academic authors can always reduce the margins or change the interline spacing to be able to squeeze in more half-truths. Wow, this all sounds very negative. I should mention that RinohType was in a large part also inspired by (La)TeX in a positive way; the latter gets a lot of things right indeed. However, I believe we can do better than TeX. Not so much in the typesetting quality, but in the ease-of-use. For me, the obvious programming language to choose for this little project was Python, as it is probably the most accessible programming language and generally fun to program in (ok, that's subjective). I imagined Python's powerful OO could be employed to define document styles that could easily be inherited from. Initially, I also planned on the source document being Python source files. While technically possible, I am now convinced that Python's syntax is not suited for this purpose. My goals in developing RinohType are mostly inspired by (La)TeX's shortcomings and common sense: RinohType should have a simple, transparent design and depend on as few external libraries as possible. This helps to keep installation and usage simple. It should be easy to define custom document layouts and visual styles. RinohType should accept Unicode input (only!). There should be built-in support for images and floats. It should be able to perform high-quality typesetting, supporting kerning, ligatures and hyphenation at the least. It should be able to typeset complex mathematical formulae. It should support modern font technologies (OpenType) and output to PDF . Naturally, it should support obvious features such as cross-references, page numbering, footnotes, table of contents and index generation. Current Status Because of the Unicode requirement, I opted to skip Python 2 and go with Python 3 which uses Unicode for all text strings. This avoids all problems associated with input encoding and simplifies text handling internally. At the time of writing, RinohType implements: A simple, but powerful page layout engine, allowing for page headers/footers, columns and floats. Typesetting is already quite capable, supporting hyphenation, sub/superscripts, kerning, ligatures, text justification (left, right, justified) and alignment to tab stops. A hierarchical styles system, for both paragraphs and other objects such as figures and tables. Nestable inline text styling. Support for Type1, TrueType and OpenType (both the TrueType and CFF /Postscript/Type1 variants) fonts. A simple PDF backend. Other backends can be easily added. Numbered, unnumbered and definition lists. Figures (input as PDF files) and basic tables (with row/column spanning), with automatically numbered captions. Cross-references, automatic page numbering and footnotes. Automatically generated table of contents. With the help of citeproc-py , support for citing references from a BibTeX database and generating a bibliography. The one major omission from this list is formula rendering. I did try using the TeX formula renderer from matplotlib (the mathtext module) and SVGMath , but with unsatisfactory results. I've decided to write math rendering from scratch once the core of RinohType (everything listed above) is working properly. Example Documents and Input Formats EDIT Some PDF viewers (Firefox's pdf.js, Evince, ePDFViewer) seem to have a problem with the CFF OpenType fonts embedded in the sample PDF files below. I still need to determine if this is a bug in these viewers or in RinohType (see issue 2 ). After abandoning the idea to use Python source files as the input format, I opted to go with XML , since it's a very common format and, more importantly, allows for validation using XML schemas. The RFIC example in the RinohType repository makes use of a custom XML input format, as defined in rfic.rnc ( RELAX NG Compact ). This example shows off most of RinoType's capabilities. Download the generated PDF to see the output. Guided by the RFIC example, it should be fairly straightforward (but still a lot of work) to write a DocBook frontend for RinohType. XML is also a great intermediate format, useful when to- XML converters for other input formats are available. XML is unfortunately not the best format for hand editing. One of the advantages of TeX source files is that they are easy to write and read (the content parts anyway). Luckily, Python's \"native\" reStructuredText is a great markup syntax that is easy to write and read. Additionally, it is extensible, which makes it pretty much the perfect input format for RinohType (I haven't thought about how to verify rST input yet, though). The rST example attempts to typeset the ReStructuredText Primer . Here is the output . The rST parser contained in rst.py will eventually be moved into the core of RinohType as a frontend. Evaluation Unsurprisingly, even after four years into its development, RinohType still does not provide an option for absolute figure placement, the missing LaTeX feature that started this journey. Of course, a lot of other things needed to be put in place before this could be addressed. While I could implement this feature at this point, there are more pressing things to address. I'm pretty happy with the result so far and I'm especially proud of the simplicity and compactness of the code. The rinoh Python package counts less than 6500 lines of code (excluding comments/docstrings and empty lines). This includes both the PDF backend (1700 lines) and the font parsers (1750 lines), so the core of RinohType comprises only about 3000 lines of code! I think this is in a large part made possible due to the expressive power of Python. Though the fact that I was constantly refactoring must have also been an important factor. One aspect that I'm not so enthusiastic about is RinohType's performance. On my modest Celeron T3000 1.8 GHz laptop, the average rendering time for a page in the RFIC example is a disappointing 0.8 seconds. For small documents, this is unlikely to be a problem, but for books it's problematic. RinohType should become at least a factor of ten faster. I've already introduced some optimizations such as memoization and using generators instead of lists, but it is clearly not cutting it. Looking for an easy solution, I've done some quick tests with PyPy3k (rendering the RFIC example over and over in a loop), but these were rather disappointing; rendering speed was about five times slower compared to CPython. With Cython, I'm not sure what part of the code to enhance with type declarations, as there is no obvious number crunching going on. Planned Work I first want to finish refactoring and documenting the remaining parts of the code. When this is done, performance tweaking will probably be near the top of my to-do list. Once the current functionality is more or less stable, I'd like to tackle maths typesetting. I'm secretly hoping Microsoft's mathematical OpenType layout extensions can help me get good results for at least a small number of fonts with minimal effort. Some other features that I have been thinking of, in order of likeliness to actually make it into RinohType in the foreseeable future: Manual figure placement! Provide a number of standard document/page/font styles Fake small capitals for fonts that do not provide any Enhance the PDF backend with support for colors, hyperlinks, bookmarks, etc. Provide a RinohType output backend for Sphinx Include font definitions for freely available fonts (automatically downloaded when referenced) Advanced typesetting features such as Knuth-Plass line breaking and microtypography as in PDFTeX (once performance is up to standards) DocBook frontend Support for non-Western languages; support RTL text and related OpenType extensions Non-rectangular paragraphs For the Brave / Dependencies You can try out RinohType by cloning the repository , adding the top-level directory to your PYTHON_PATH and running the examples. For the RFIC example, you will need citeproc-py . If you want to validate the XML input, you will also need lxml . For the reStructuredText example, you need docutils . While it should be obvious how to adjust the text styles in the examples, it is not equally obvious how page layout is defined in the RFIC example. Also, an introduction on how the parsed input data ( XML or rST) is processed might be useful if you want to define another XML input schema or extend the reStructuredText frontend. For this reason, I plan on following up on this article with a short tutorial covering these topics before I start writing official documentation. The License While this originally started out as just another one of my programming projects, I am investigating the possibility to sell licenses for commercial use, as this could ensure that RinohType is actively developed in the future. I have therefor released RinohType under the Affero GPL . The Affero GPL ensures that RinohType is free for use in open source projects. I am aware that the viral nature of the GPL makes it impossible for non- GPL projects to depend on RinohType, though. Unfortunately, it is this same viral nature that makes it possible to sell commercial-use licenses (a non-intentional side-effect of the copyleft?). Perhaps it is possible to employ a BSD -like license customized to prohibit commercial use? I have not yet found any examples of such a setup, but I will look into this. Discussion See comments on Hacker News and Reddit .","tags":"rinohtype","loc":"http://www.mos6581.org/introducing-rinohtype","title":"Introducing RinohType"}]}